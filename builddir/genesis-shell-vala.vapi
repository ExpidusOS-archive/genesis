/* genesis-shell-vala.vapi generated by valac 0.52.4, do not modify. */

namespace Genesis {
	namespace X11 {
		[CCode (cheader_filename = "genesis-shell.h")]
		public class Backend : GLib.Object, Genesis.ShellBackend {
			public Backend (Genesis.Shell shell) throws Genesis.ShellError;
			public Xcb.Atom? get_atom (string name);
			public Xcb.Screen get_default_screen ();
			public Xcb.Connection conn { get; }
			public Xcb.RandR.Connection randr { get; }
		}
		[CCode (cheader_filename = "genesis-shell.h")]
		public class Monitor : Genesis.MonitorBackend {
			public Monitor (Genesis.X11.Backend backend, Xcb.RandR.Output output);
			public override string to_string ();
			public void update ();
			public override bool connected { get; }
			public override string name { get; }
			public override Genesis.RectangleUint32 physical_rect { get; }
			public bool previous_state { get; }
			public override Genesis.RectangleUint16 resolution { get; }
		}
		[CCode (cheader_filename = "genesis-shell.h", cname = "_xcb_randr_screen_change_notify_event_t")]
		[Compact]
		public class xcb_randr_screen_change_notify_event {
			public Xcb.Timestamp config_timestamp;
			public uint16 height;
			public uint16 mheight;
			public uint16 mwidth;
			public Xcb.Window request_window;
			public uint8 response_type;
			public Xcb.Window root;
			public uint8 rotation;
			public uint16 sequence;
			public uint16 size_id;
			public uint16 subpixel_order;
			public Xcb.Timestamp timestamp;
			public uint16 width;
			public xcb_randr_screen_change_notify_event ();
		}
	}
	[CCode (cheader_filename = "genesis-shell.h")]
	public abstract class MonitorBackend : GLib.Object, Genesis.GenericObject {
		protected MonitorBackend ();
		public virtual string to_string ();
		public abstract bool connected { get; }
		public double diag_mm { get; }
		public double diag_px { get; }
		public double dpi { get; }
		public abstract string name { get; }
		public abstract Genesis.RectangleUint32 physical_rect { get; }
		public abstract Genesis.RectangleUint16 resolution { get; }
		public signal void connection_changed ();
	}
	[CCode (cheader_filename = "genesis-shell.h")]
	[DBus (name = "com.expidus.Genesis")]
	public class Shell : Gtk.Application {
		protected string arg_backend;
		protected bool arg_version;
		public Shell ();
		protected override void activate ();
		protected override void run_mainloop ();
		protected override void shutdown ();
	}
	[CCode (cheader_filename = "genesis-shell.h")]
	public interface BaseDesktop : Gtk.Window {
	}
	[CCode (cheader_filename = "genesis-shell.h")]
	public interface GenericObject : GLib.Object {
		public abstract void to_lua (Lua.LuaVM lvm);
		public abstract string to_string ();
	}
	[CCode (cheader_filename = "genesis-shell.h")]
	public interface ShellBackend : GLib.Object {
		public abstract GLib.List<weak Genesis.MonitorBackend> monitors { owned get; }
		public signal void monitors_changed (bool[] changed);
	}
	[CCode (cheader_filename = "genesis-shell.h")]
	public struct RectangleUint16 {
		public uint16 x;
		public uint16 y;
		public uint16 width;
		public uint16 height;
	}
	[CCode (cheader_filename = "genesis-shell.h")]
	public struct RectangleUint32 {
		public uint32 x;
		public uint32 y;
		public uint32 width;
		public uint32 height;
	}
	[CCode (cheader_filename = "genesis-shell.h")]
	public errordomain ShellError {
		BACKEND
	}
	[CCode (cheader_filename = "genesis-shell.h")]
	public const string DATADIR;
	[CCode (cheader_filename = "genesis-shell.h")]
	public const string VERSION;
	[CCode (cheader_filename = "genesis-shell.h")]
	public static int main (string[] args);
}
